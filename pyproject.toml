[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dt-gcnn-mlx"
version = "0.1.0"
description = "Dynamic Triplet Graph Convolutional Neural Network optimized for Apple Silicon using MLX"
readme = "README.md"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = [
    "deep learning",
    "graph neural networks",
    "GCN",
    "triplet loss",
    "MLX",
    "Apple Silicon",
    "embeddings"
]
requires-python = ">=3.8"
dependencies = [
    "mlx>=0.9.0",
    "numpy>=1.24.0",
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "sentencepiece>=0.1.99",
    "networkx>=3.0",
    "scikit-learn>=1.3.0",
    "tqdm>=4.65.0",
    "pyyaml>=6.0",
    "pandas>=2.0.0",
    "matplotlib>=3.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "mypy>=0.990",
    "pre-commit>=2.20.0",
    "ruff>=0.0.290",
]
docs = [
    "sphinx>=4.5.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-autodoc-typehints>=1.18.0",
    "myst-parser>=0.18.0",
    "nbsphinx>=0.8.0",
]
viz = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "umap-learn>=0.5.0",
    "tensorboard>=2.10.0",
]
all = [
    "dt-gcnn-mlx[dev,docs,viz]",
]

[project.urls]
Homepage = "https://github.com/yourusername/dt-gcnn"
Documentation = "https://dt-gcnn.readthedocs.io"
Repository = "https://github.com/yourusername/dt-gcnn"
Issues = "https://github.com/yourusername/dt-gcnn/issues"

[project.scripts]
dt-gcnn-train = "dt_gcnn_mlx.cli.train:main"
dt-gcnn-evaluate = "dt_gcnn_mlx.cli.evaluate:main"
dt-gcnn-export = "dt_gcnn_mlx.cli.export:main"
dt-gcnn-benchmark = "dt_gcnn_mlx.cli.benchmark:main"

[tool.setuptools]
package-dir = {"" = "dt-gcnn-mlx/src"}

[tool.setuptools.packages.find]
where = ["dt-gcnn-mlx/src"]

[tool.setuptools.package-data]
dt_gcnn_mlx = ["configs/*.yaml", "configs/*.json"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mlx.*",
    "transformers.*",
    "torch.*",
    "networkx.*",
    "sklearn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=dt_gcnn_mlx",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-n", "auto",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks integration tests",
]

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.coverage.run]
branch = true
source = ["dt_gcnn_mlx"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]